// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: supplier.sql

package dbgen

import (
	"context"
)

const checkSupplierNameExists = `-- name: CheckSupplierNameExists :one
SELECT EXISTS(SELECT 1 FROM suppliers WHERE name = $1)
`

func (q *Queries) CheckSupplierNameExists(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRow(ctx, checkSupplierNameExists, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createSupplier = `-- name: CreateSupplier :one
INSERT INTO suppliers (id, name)
VALUES ($1, $2)
RETURNING id
`

type CreateSupplierParams struct {
	ID   int64  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

func (q *Queries) CreateSupplier(ctx context.Context, arg CreateSupplierParams) (int64, error) {
	row := q.db.QueryRow(ctx, createSupplier, arg.ID, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}
