// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: staff_user_tokens.sql

package dbgen

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStaffUserToken = `-- name: CreateStaffUserToken :one
INSERT INTO staff_user_tokens (
    id,
    staff_user_id,
    refresh_token,
    user_agent,
    ip_address,
    expired_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, created_at
`

type CreateStaffUserTokenParams struct {
	ID           int64              `db:"id" json:"id"`
	StaffUserID  int64              `db:"staff_user_id" json:"staff_user_id"`
	RefreshToken string             `db:"refresh_token" json:"refresh_token"`
	UserAgent    pgtype.Text        `db:"user_agent" json:"user_agent"`
	IpAddress    *netip.Addr        `db:"ip_address" json:"ip_address"`
	ExpiredAt    pgtype.Timestamptz `db:"expired_at" json:"expired_at"`
}

type CreateStaffUserTokenRow struct {
	ID        int64              `db:"id" json:"id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateStaffUserToken(ctx context.Context, arg CreateStaffUserTokenParams) (CreateStaffUserTokenRow, error) {
	row := q.db.QueryRow(ctx, createStaffUserToken,
		arg.ID,
		arg.StaffUserID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.IpAddress,
		arg.ExpiredAt,
	)
	var i CreateStaffUserTokenRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}
