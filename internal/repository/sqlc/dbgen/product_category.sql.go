// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product_category.sql

package dbgen

import (
	"context"
)

const checkProductCategoryExistByID = `-- name: CheckProductCategoryExistByID :one
SELECT EXISTS(SELECT 1 FROM product_categories WHERE id = $1)
`

func (q *Queries) CheckProductCategoryExistByID(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkProductCategoryExistByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkProductCategoryNameExists = `-- name: CheckProductCategoryNameExists :one
SELECT EXISTS(SELECT 1 FROM product_categories WHERE name = $1)
`

func (q *Queries) CheckProductCategoryNameExists(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRow(ctx, checkProductCategoryNameExists, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkProductCategoryNameExistsExcludeSelf = `-- name: CheckProductCategoryNameExistsExcludeSelf :one
SELECT EXISTS(SELECT 1 FROM product_categories WHERE name = $1 AND id != $2)
`

type CheckProductCategoryNameExistsExcludeSelfParams struct {
	Name string `db:"name" json:"name"`
	ID   int64  `db:"id" json:"id"`
}

func (q *Queries) CheckProductCategoryNameExistsExcludeSelf(ctx context.Context, arg CheckProductCategoryNameExistsExcludeSelfParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkProductCategoryNameExistsExcludeSelf, arg.Name, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createProductCategory = `-- name: CreateProductCategory :one
INSERT INTO product_categories (id, name)
VALUES ($1, $2)
RETURNING id
`

type CreateProductCategoryParams struct {
	ID   int64  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (int64, error) {
	row := q.db.QueryRow(ctx, createProductCategory, arg.ID, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}
