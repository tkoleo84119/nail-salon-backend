// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: coupon.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkCouponCodeExists = `-- name: CheckCouponCodeExists :one
SELECT EXISTS(
  SELECT 1 FROM coupons
  WHERE code = $1
)
`

func (q *Queries) CheckCouponCodeExists(ctx context.Context, code string) (bool, error) {
	row := q.db.QueryRow(ctx, checkCouponCodeExists, code)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkCouponExists = `-- name: CheckCouponExists :one
SELECT EXISTS(
  SELECT 1 FROM coupons
  WHERE id = $1
)
`

func (q *Queries) CheckCouponExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkCouponExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkCouponNameExists = `-- name: CheckCouponNameExists :one
SELECT EXISTS(
  SELECT 1 FROM coupons
  WHERE name = $1
)
`

func (q *Queries) CheckCouponNameExists(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRow(ctx, checkCouponNameExists, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkCouponNameExistsExcluding = `-- name: CheckCouponNameExistsExcluding :one
SELECT EXISTS(
  SELECT 1 FROM coupons
  WHERE name = $1 AND id != $2
)
`

type CheckCouponNameExistsExcludingParams struct {
	Name string `db:"name" json:"name"`
	ID   int64  `db:"id" json:"id"`
}

func (q *Queries) CheckCouponNameExistsExcluding(ctx context.Context, arg CheckCouponNameExistsExcludingParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkCouponNameExistsExcluding, arg.Name, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createCoupon = `-- name: CreateCoupon :exec
INSERT INTO coupons (
  id,
  name,
  display_name,
  code,
  discount_rate,
  discount_amount,
  is_active,
  note
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
`

type CreateCouponParams struct {
	ID             int64          `db:"id" json:"id"`
	Name           string         `db:"name" json:"name"`
	DisplayName    string         `db:"display_name" json:"display_name"`
	Code           string         `db:"code" json:"code"`
	DiscountRate   pgtype.Numeric `db:"discount_rate" json:"discount_rate"`
	DiscountAmount pgtype.Numeric `db:"discount_amount" json:"discount_amount"`
	IsActive       pgtype.Bool    `db:"is_active" json:"is_active"`
	Note           pgtype.Text    `db:"note" json:"note"`
}

func (q *Queries) CreateCoupon(ctx context.Context, arg CreateCouponParams) error {
	_, err := q.db.Exec(ctx, createCoupon,
		arg.ID,
		arg.Name,
		arg.DisplayName,
		arg.Code,
		arg.DiscountRate,
		arg.DiscountAmount,
		arg.IsActive,
		arg.Note,
	)
	return err
}

const getCouponByIDs = `-- name: GetCouponByIDs :many
SELECT
  id,
  display_name,
  code,
  COALESCE(discount_rate, 0) AS discount_rate,
  COALESCE(discount_amount, 0) AS discount_amount,
  is_active
FROM coupons
WHERE id = ANY($1::bigint[])
`

type GetCouponByIDsRow struct {
	ID             int64          `db:"id" json:"id"`
	DisplayName    string         `db:"display_name" json:"display_name"`
	Code           string         `db:"code" json:"code"`
	DiscountRate   pgtype.Numeric `db:"discount_rate" json:"discount_rate"`
	DiscountAmount pgtype.Numeric `db:"discount_amount" json:"discount_amount"`
	IsActive       pgtype.Bool    `db:"is_active" json:"is_active"`
}

func (q *Queries) GetCouponByIDs(ctx context.Context, dollar_1 []int64) ([]GetCouponByIDsRow, error) {
	rows, err := q.db.Query(ctx, getCouponByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCouponByIDsRow{}
	for rows.Next() {
		var i GetCouponByIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.DisplayName,
			&i.Code,
			&i.DiscountRate,
			&i.DiscountAmount,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
