// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkProductNameBrandExistsInStore = `-- name: CheckProductNameBrandExistsInStore :one
SELECT EXISTS(
    SELECT 1 FROM products 
    WHERE store_id = $1 AND name = $2 AND brand_id = $3
)
`

type CheckProductNameBrandExistsInStoreParams struct {
	StoreID int64  `db:"store_id" json:"store_id"`
	Name    string `db:"name" json:"name"`
	BrandID int64  `db:"brand_id" json:"brand_id"`
}

func (q *Queries) CheckProductNameBrandExistsInStore(ctx context.Context, arg CheckProductNameBrandExistsInStoreParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkProductNameBrandExistsInStore, arg.StoreID, arg.Name, arg.BrandID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (
    id,
    store_id,
    name,
    brand_id,
    category_id,
    current_stock,
    safety_stock,
    unit,
    storage_location,
    note
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
`

type CreateProductParams struct {
	ID              int64       `db:"id" json:"id"`
	StoreID         int64       `db:"store_id" json:"store_id"`
	Name            string      `db:"name" json:"name"`
	BrandID         int64       `db:"brand_id" json:"brand_id"`
	CategoryID      int64       `db:"category_id" json:"category_id"`
	CurrentStock    int32       `db:"current_stock" json:"current_stock"`
	SafetyStock     pgtype.Int4 `db:"safety_stock" json:"safety_stock"`
	Unit            pgtype.Text `db:"unit" json:"unit"`
	StorageLocation pgtype.Text `db:"storage_location" json:"storage_location"`
	Note            pgtype.Text `db:"note" json:"note"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.Exec(ctx, createProduct,
		arg.ID,
		arg.StoreID,
		arg.Name,
		arg.BrandID,
		arg.CategoryID,
		arg.CurrentStock,
		arg.SafetyStock,
		arg.Unit,
		arg.StorageLocation,
		arg.Note,
	)
	return err
}
