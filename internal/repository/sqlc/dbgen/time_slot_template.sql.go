// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: time_slot_template.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkTimeSlotTemplateExists = `-- name: CheckTimeSlotTemplateExists :one
SELECT EXISTS (
    SELECT 1
    FROM time_slot_templates
    WHERE id = $1
)
`

func (q *Queries) CheckTimeSlotTemplateExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkTimeSlotTemplateExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createTimeSlotTemplate = `-- name: CreateTimeSlotTemplate :one
INSERT INTO time_slot_templates (
    id,
    name,
    note,
    updater,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, NOW(), NOW()
) RETURNING
    id,
    name,
    note,
    updater,
    created_at,
    updated_at
`

type CreateTimeSlotTemplateParams struct {
	ID      int64       `db:"id" json:"id"`
	Name    string      `db:"name" json:"name"`
	Note    pgtype.Text `db:"note" json:"note"`
	Updater pgtype.Int8 `db:"updater" json:"updater"`
}

func (q *Queries) CreateTimeSlotTemplate(ctx context.Context, arg CreateTimeSlotTemplateParams) (TimeSlotTemplate, error) {
	row := q.db.QueryRow(ctx, createTimeSlotTemplate,
		arg.ID,
		arg.Name,
		arg.Note,
		arg.Updater,
	)
	var i TimeSlotTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Note,
		&i.Updater,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTimeSlotTemplate = `-- name: DeleteTimeSlotTemplate :exec
DELETE FROM time_slot_templates
WHERE id = $1
`

func (q *Queries) DeleteTimeSlotTemplate(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTimeSlotTemplate, id)
	return err
}

const getTimeSlotTemplateWithItemsByID = `-- name: GetTimeSlotTemplateWithItemsByID :many
SELECT
    t.id,
    t.name,
    t.note,
    t.updater,
    t.created_at,
    t.updated_at,
    ti.id as item_id,
    ti.start_time,
    ti.end_time
FROM time_slot_templates t
LEFT JOIN time_slot_template_items ti ON t.id = ti.template_id
WHERE t.id = $1
`

type GetTimeSlotTemplateWithItemsByIDRow struct {
	ID        int64              `db:"id" json:"id"`
	Name      string             `db:"name" json:"name"`
	Note      pgtype.Text        `db:"note" json:"note"`
	Updater   pgtype.Int8        `db:"updater" json:"updater"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	ItemID    pgtype.Int8        `db:"item_id" json:"item_id"`
	StartTime pgtype.Time        `db:"start_time" json:"start_time"`
	EndTime   pgtype.Time        `db:"end_time" json:"end_time"`
}

func (q *Queries) GetTimeSlotTemplateWithItemsByID(ctx context.Context, id int64) ([]GetTimeSlotTemplateWithItemsByIDRow, error) {
	rows, err := q.db.Query(ctx, getTimeSlotTemplateWithItemsByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTimeSlotTemplateWithItemsByIDRow{}
	for rows.Next() {
		var i GetTimeSlotTemplateWithItemsByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Note,
			&i.Updater,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ItemID,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
