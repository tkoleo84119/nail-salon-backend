// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customer_terms_acceptance.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkCustomerTermsExistsByCustomerIDAndVersion = `-- name: CheckCustomerTermsExistsByCustomerIDAndVersion :one
SELECT EXISTS(
  SELECT 1 FROM customer_terms_acceptance
  WHERE customer_id = $1 AND terms_version = $2
) as exists
`

type CheckCustomerTermsExistsByCustomerIDAndVersionParams struct {
	CustomerID   int64  `db:"customer_id" json:"customer_id"`
	TermsVersion string `db:"terms_version" json:"terms_version"`
}

func (q *Queries) CheckCustomerTermsExistsByCustomerIDAndVersion(ctx context.Context, arg CheckCustomerTermsExistsByCustomerIDAndVersionParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkCustomerTermsExistsByCustomerIDAndVersion, arg.CustomerID, arg.TermsVersion)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createCustomerTermsAcceptance = `-- name: CreateCustomerTermsAcceptance :exec
INSERT INTO customer_terms_acceptance (id, customer_id, terms_version, accepted_at)
VALUES ($1, $2, $3, $4)
`

type CreateCustomerTermsAcceptanceParams struct {
	ID           int64              `db:"id" json:"id"`
	CustomerID   int64              `db:"customer_id" json:"customer_id"`
	TermsVersion string             `db:"terms_version" json:"terms_version"`
	AcceptedAt   pgtype.Timestamptz `db:"accepted_at" json:"accepted_at"`
}

func (q *Queries) CreateCustomerTermsAcceptance(ctx context.Context, arg CreateCustomerTermsAcceptanceParams) error {
	_, err := q.db.Exec(ctx, createCustomerTermsAcceptance,
		arg.ID,
		arg.CustomerID,
		arg.TermsVersion,
		arg.AcceptedAt,
	)
	return err
}
