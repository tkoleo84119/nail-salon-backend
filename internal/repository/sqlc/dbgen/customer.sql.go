// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customer.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (id, name, phone, birthday, city, favorite_shapes, favorite_colors,
       favorite_styles, is_introvert, referral_source, referrer, customer_note)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, name, phone, birthday, city, favorite_shapes, favorite_colors,
       favorite_styles, is_introvert, referral_source, referrer, customer_note,
       store_note, level, is_blacklisted, created_at, updated_at
`

type CreateCustomerParams struct {
	ID             int64       `db:"id" json:"id"`
	Name           string      `db:"name" json:"name"`
	Phone          string      `db:"phone" json:"phone"`
	Birthday       pgtype.Date `db:"birthday" json:"birthday"`
	City           pgtype.Text `db:"city" json:"city"`
	FavoriteShapes []string    `db:"favorite_shapes" json:"favorite_shapes"`
	FavoriteColors []string    `db:"favorite_colors" json:"favorite_colors"`
	FavoriteStyles []string    `db:"favorite_styles" json:"favorite_styles"`
	IsIntrovert    pgtype.Bool `db:"is_introvert" json:"is_introvert"`
	ReferralSource []string    `db:"referral_source" json:"referral_source"`
	Referrer       pgtype.Text `db:"referrer" json:"referrer"`
	CustomerNote   pgtype.Text `db:"customer_note" json:"customer_note"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.ID,
		arg.Name,
		arg.Phone,
		arg.Birthday,
		arg.City,
		arg.FavoriteShapes,
		arg.FavoriteColors,
		arg.FavoriteStyles,
		arg.IsIntrovert,
		arg.ReferralSource,
		arg.Referrer,
		arg.CustomerNote,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Birthday,
		&i.City,
		&i.FavoriteShapes,
		&i.FavoriteColors,
		&i.FavoriteStyles,
		&i.IsIntrovert,
		&i.ReferralSource,
		&i.Referrer,
		&i.CustomerNote,
		&i.StoreNote,
		&i.Level,
		&i.IsBlacklisted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, name, phone, birthday, city, favorite_shapes, favorite_colors,
       favorite_styles, is_introvert, referral_source, referrer, customer_note,
       store_note, level, is_blacklisted, created_at, updated_at
FROM customers
WHERE id = $1
`

func (q *Queries) GetCustomerByID(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Birthday,
		&i.City,
		&i.FavoriteShapes,
		&i.FavoriteColors,
		&i.FavoriteStyles,
		&i.IsIntrovert,
		&i.ReferralSource,
		&i.Referrer,
		&i.CustomerNote,
		&i.StoreNote,
		&i.Level,
		&i.IsBlacklisted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
