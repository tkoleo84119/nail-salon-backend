// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customer.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkCustomerExistsByID = `-- name: CheckCustomerExistsByID :one
SELECT EXISTS (SELECT 1 FROM customers WHERE id = $1)
`

func (q *Queries) CheckCustomerExistsByID(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkCustomerExistsByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkCustomerExistsByLineUid = `-- name: CheckCustomerExistsByLineUid :one
SELECT EXISTS (SELECT 1 FROM customers WHERE line_uid = $1)
`

func (q *Queries) CheckCustomerExistsByLineUid(ctx context.Context, lineUid string) (bool, error) {
	row := q.db.QueryRow(ctx, checkCustomerExistsByLineUid, lineUid)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO customers (id, line_uid, line_name, email, name, phone, birthday, city, favorite_shapes, favorite_colors,
      favorite_styles, is_introvert, referral_source, referrer, customer_note, level)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
`

type CreateCustomerParams struct {
	ID             int64       `db:"id" json:"id"`
	LineUid        string      `db:"line_uid" json:"line_uid"`
	LineName       pgtype.Text `db:"line_name" json:"line_name"`
	Email          pgtype.Text `db:"email" json:"email"`
	Name           string      `db:"name" json:"name"`
	Phone          string      `db:"phone" json:"phone"`
	Birthday       pgtype.Date `db:"birthday" json:"birthday"`
	City           pgtype.Text `db:"city" json:"city"`
	FavoriteShapes []string    `db:"favorite_shapes" json:"favorite_shapes"`
	FavoriteColors []string    `db:"favorite_colors" json:"favorite_colors"`
	FavoriteStyles []string    `db:"favorite_styles" json:"favorite_styles"`
	IsIntrovert    pgtype.Bool `db:"is_introvert" json:"is_introvert"`
	ReferralSource []string    `db:"referral_source" json:"referral_source"`
	Referrer       pgtype.Text `db:"referrer" json:"referrer"`
	CustomerNote   pgtype.Text `db:"customer_note" json:"customer_note"`
	Level          pgtype.Text `db:"level" json:"level"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.Exec(ctx, createCustomer,
		arg.ID,
		arg.LineUid,
		arg.LineName,
		arg.Email,
		arg.Name,
		arg.Phone,
		arg.Birthday,
		arg.City,
		arg.FavoriteShapes,
		arg.FavoriteColors,
		arg.FavoriteStyles,
		arg.IsIntrovert,
		arg.ReferralSource,
		arg.Referrer,
		arg.CustomerNote,
		arg.Level,
	)
	return err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, name, line_uid, line_name, phone, birthday, email, city, favorite_shapes, favorite_colors,
      favorite_styles, is_introvert, referral_source, referrer, customer_note,
      store_note, level, is_blacklisted, last_visit_at, created_at, updated_at
FROM customers
WHERE id = $1
`

type GetCustomerByIDRow struct {
	ID             int64              `db:"id" json:"id"`
	Name           string             `db:"name" json:"name"`
	LineUid        string             `db:"line_uid" json:"line_uid"`
	LineName       pgtype.Text        `db:"line_name" json:"line_name"`
	Phone          string             `db:"phone" json:"phone"`
	Birthday       pgtype.Date        `db:"birthday" json:"birthday"`
	Email          pgtype.Text        `db:"email" json:"email"`
	City           pgtype.Text        `db:"city" json:"city"`
	FavoriteShapes []string           `db:"favorite_shapes" json:"favorite_shapes"`
	FavoriteColors []string           `db:"favorite_colors" json:"favorite_colors"`
	FavoriteStyles []string           `db:"favorite_styles" json:"favorite_styles"`
	IsIntrovert    pgtype.Bool        `db:"is_introvert" json:"is_introvert"`
	ReferralSource []string           `db:"referral_source" json:"referral_source"`
	Referrer       pgtype.Text        `db:"referrer" json:"referrer"`
	CustomerNote   pgtype.Text        `db:"customer_note" json:"customer_note"`
	StoreNote      pgtype.Text        `db:"store_note" json:"store_note"`
	Level          pgtype.Text        `db:"level" json:"level"`
	IsBlacklisted  pgtype.Bool        `db:"is_blacklisted" json:"is_blacklisted"`
	LastVisitAt    pgtype.Timestamptz `db:"last_visit_at" json:"last_visit_at"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetCustomerByID(ctx context.Context, id int64) (GetCustomerByIDRow, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, id)
	var i GetCustomerByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LineUid,
		&i.LineName,
		&i.Phone,
		&i.Birthday,
		&i.Email,
		&i.City,
		&i.FavoriteShapes,
		&i.FavoriteColors,
		&i.FavoriteStyles,
		&i.IsIntrovert,
		&i.ReferralSource,
		&i.Referrer,
		&i.CustomerNote,
		&i.StoreNote,
		&i.Level,
		&i.IsBlacklisted,
		&i.LastVisitAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByIDs = `-- name: GetCustomerByIDs :many
SELECT id, name, line_name, phone
FROM customers
WHERE id = ANY($1::bigint[])
`

type GetCustomerByIDsRow struct {
	ID       int64       `db:"id" json:"id"`
	Name     string      `db:"name" json:"name"`
	LineName pgtype.Text `db:"line_name" json:"line_name"`
	Phone    string      `db:"phone" json:"phone"`
}

func (q *Queries) GetCustomerByIDs(ctx context.Context, dollar_1 []int64) ([]GetCustomerByIDsRow, error) {
	rows, err := q.db.Query(ctx, getCustomerByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCustomerByIDsRow{}
	for rows.Next() {
		var i GetCustomerByIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LineName,
			&i.Phone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomerByLineUid = `-- name: GetCustomerByLineUid :one
SELECT id, line_name, name
FROM customers
WHERE line_uid = $1
`

type GetCustomerByLineUidRow struct {
	ID       int64       `db:"id" json:"id"`
	LineName pgtype.Text `db:"line_name" json:"line_name"`
	Name     string      `db:"name" json:"name"`
}

func (q *Queries) GetCustomerByLineUid(ctx context.Context, lineUid string) (GetCustomerByLineUidRow, error) {
	row := q.db.QueryRow(ctx, getCustomerByLineUid, lineUid)
	var i GetCustomerByLineUidRow
	err := row.Scan(&i.ID, &i.LineName, &i.Name)
	return i, err
}

const updateCustomerLastVisitAt = `-- name: UpdateCustomerLastVisitAt :exec
UPDATE customers
SET last_visit_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateCustomerLastVisitAt(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateCustomerLastVisitAt, id)
	return err
}

const updateCustomerLineName = `-- name: UpdateCustomerLineName :exec
UPDATE customers
SET line_name = $2
WHERE id = $1
`

type UpdateCustomerLineNameParams struct {
	ID       int64       `db:"id" json:"id"`
	LineName pgtype.Text `db:"line_name" json:"line_name"`
}

func (q *Queries) UpdateCustomerLineName(ctx context.Context, arg UpdateCustomerLineNameParams) error {
	_, err := q.db.Exec(ctx, updateCustomerLineName, arg.ID, arg.LineName)
	return err
}
