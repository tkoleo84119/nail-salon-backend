// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customer_coupon.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomerCoupon = `-- name: CreateCustomerCoupon :exec
INSERT INTO customer_coupons (
  id,
  customer_id,
  coupon_id,
  valid_from,
  valid_to
) VALUES (
  $1, $2, $3, $4, $5
)
`

type CreateCustomerCouponParams struct {
	ID         int64              `db:"id" json:"id"`
	CustomerID int64              `db:"customer_id" json:"customer_id"`
	CouponID   int64              `db:"coupon_id" json:"coupon_id"`
	ValidFrom  pgtype.Timestamptz `db:"valid_from" json:"valid_from"`
	ValidTo    pgtype.Timestamptz `db:"valid_to" json:"valid_to"`
}

func (q *Queries) CreateCustomerCoupon(ctx context.Context, arg CreateCustomerCouponParams) error {
	_, err := q.db.Exec(ctx, createCustomerCoupon,
		arg.ID,
		arg.CustomerID,
		arg.CouponID,
		arg.ValidFrom,
		arg.ValidTo,
	)
	return err
}

const getCustomerCouponPriceInfoByID = `-- name: GetCustomerCouponPriceInfoByID :one
SELECT
  cc.coupon_id,
  cc.customer_id,
  c.discount_rate,
  c.discount_amount,
  c.is_active,
  cc.valid_to,
  cc.is_used
FROM customer_coupons cc
JOIN coupons c ON cc.coupon_id = c.id
WHERE cc.id = $1
`

type GetCustomerCouponPriceInfoByIDRow struct {
	CouponID       int64              `db:"coupon_id" json:"coupon_id"`
	CustomerID     int64              `db:"customer_id" json:"customer_id"`
	DiscountRate   pgtype.Numeric     `db:"discount_rate" json:"discount_rate"`
	DiscountAmount pgtype.Numeric     `db:"discount_amount" json:"discount_amount"`
	IsActive       pgtype.Bool        `db:"is_active" json:"is_active"`
	ValidTo        pgtype.Timestamptz `db:"valid_to" json:"valid_to"`
	IsUsed         pgtype.Bool        `db:"is_used" json:"is_used"`
}

func (q *Queries) GetCustomerCouponPriceInfoByID(ctx context.Context, id int64) (GetCustomerCouponPriceInfoByIDRow, error) {
	row := q.db.QueryRow(ctx, getCustomerCouponPriceInfoByID, id)
	var i GetCustomerCouponPriceInfoByIDRow
	err := row.Scan(
		&i.CouponID,
		&i.CustomerID,
		&i.DiscountRate,
		&i.DiscountAmount,
		&i.IsActive,
		&i.ValidTo,
		&i.IsUsed,
	)
	return i, err
}
