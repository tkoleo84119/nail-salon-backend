// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customer_token.sql

package dbgen

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomerToken = `-- name: CreateCustomerToken :one
INSERT INTO customer_tokens (id, customer_id, refresh_token, user_agent, ip_address, expired_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, customer_id, refresh_token, user_agent, ip_address, expired_at, is_revoked, created_at, updated_at
`

type CreateCustomerTokenParams struct {
	ID           int64              `db:"id" json:"id"`
	CustomerID   int64              `db:"customer_id" json:"customer_id"`
	RefreshToken string             `db:"refresh_token" json:"refresh_token"`
	UserAgent    pgtype.Text        `db:"user_agent" json:"user_agent"`
	IpAddress    *netip.Addr        `db:"ip_address" json:"ip_address"`
	ExpiredAt    pgtype.Timestamptz `db:"expired_at" json:"expired_at"`
}

func (q *Queries) CreateCustomerToken(ctx context.Context, arg CreateCustomerTokenParams) (CustomerToken, error) {
	row := q.db.QueryRow(ctx, createCustomerToken,
		arg.ID,
		arg.CustomerID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.IpAddress,
		arg.ExpiredAt,
	)
	var i CustomerToken
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.IpAddress,
		&i.ExpiredAt,
		&i.IsRevoked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getValidCustomerToken = `-- name: GetValidCustomerToken :one
SELECT id, customer_id, refresh_token, user_agent, ip_address, expired_at,
      is_revoked, created_at, updated_at
FROM customer_tokens
WHERE refresh_token = $1 AND expired_at > NOW() AND is_revoked = false
`

func (q *Queries) GetValidCustomerToken(ctx context.Context, refreshToken string) (CustomerToken, error) {
	row := q.db.QueryRow(ctx, getValidCustomerToken, refreshToken)
	var i CustomerToken
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.IpAddress,
		&i.ExpiredAt,
		&i.IsRevoked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
