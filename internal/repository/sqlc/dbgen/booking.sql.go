// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: booking.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (
    id,
    store_id,
    customer_id,
    stylist_id,
    time_slot_id,
    is_chat_enabled,
    note,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, store_id, customer_id, stylist_id, time_slot_id, is_chat_enabled, actual_duration, note, used_products, status, created_at, updated_at
`

type CreateBookingParams struct {
	ID            int64       `db:"id" json:"id"`
	StoreID       int64       `db:"store_id" json:"store_id"`
	CustomerID    int64       `db:"customer_id" json:"customer_id"`
	StylistID     int64       `db:"stylist_id" json:"stylist_id"`
	TimeSlotID    int64       `db:"time_slot_id" json:"time_slot_id"`
	IsChatEnabled pgtype.Bool `db:"is_chat_enabled" json:"is_chat_enabled"`
	Note          pgtype.Text `db:"note" json:"note"`
	Status        string      `db:"status" json:"status"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRow(ctx, createBooking,
		arg.ID,
		arg.StoreID,
		arg.CustomerID,
		arg.StylistID,
		arg.TimeSlotID,
		arg.IsChatEnabled,
		arg.Note,
		arg.Status,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.CustomerID,
		&i.StylistID,
		&i.TimeSlotID,
		&i.IsChatEnabled,
		&i.ActualDuration,
		&i.Note,
		&i.UsedProducts,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
