// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: booking.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cancelBooking = `-- name: CancelBooking :one
UPDATE bookings
SET status = $2, cancel_reason = $3, updated_at = NOW()
WHERE id = $1
RETURNING id
`

type CancelBookingParams struct {
	ID           int64       `db:"id" json:"id"`
	Status       string      `db:"status" json:"status"`
	CancelReason pgtype.Text `db:"cancel_reason" json:"cancel_reason"`
}

func (q *Queries) CancelBooking(ctx context.Context, arg CancelBookingParams) (int64, error) {
	row := q.db.QueryRow(ctx, cancelBooking, arg.ID, arg.Status, arg.CancelReason)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (
    id,
    store_id,
    customer_id,
    stylist_id,
    time_slot_id,
    is_chat_enabled,
    note,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, store_id, customer_id, stylist_id, time_slot_id, is_chat_enabled, actual_duration, note, used_products, status, created_at, updated_at, cancel_reason
`

type CreateBookingParams struct {
	ID            int64       `db:"id" json:"id"`
	StoreID       int64       `db:"store_id" json:"store_id"`
	CustomerID    int64       `db:"customer_id" json:"customer_id"`
	StylistID     int64       `db:"stylist_id" json:"stylist_id"`
	TimeSlotID    int64       `db:"time_slot_id" json:"time_slot_id"`
	IsChatEnabled pgtype.Bool `db:"is_chat_enabled" json:"is_chat_enabled"`
	Note          pgtype.Text `db:"note" json:"note"`
	Status        string      `db:"status" json:"status"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRow(ctx, createBooking,
		arg.ID,
		arg.StoreID,
		arg.CustomerID,
		arg.StylistID,
		arg.TimeSlotID,
		arg.IsChatEnabled,
		arg.Note,
		arg.Status,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.CustomerID,
		&i.StylistID,
		&i.TimeSlotID,
		&i.IsChatEnabled,
		&i.ActualDuration,
		&i.Note,
		&i.UsedProducts,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CancelReason,
	)
	return i, err
}

const getBookingDetailByID = `-- name: GetBookingDetailByID :one
SELECT
    b.id,
    b.store_id,
    s.name as store_name,
    b.customer_id,
    b.stylist_id,
    st.name as stylist_name,
    b.time_slot_id,
    ts.start_time,
    ts.end_time,
    sch.work_date,
    b.is_chat_enabled,
    b.note,
    b.status,
    b.created_at,
    b.updated_at
FROM bookings b
JOIN stores s ON b.store_id = s.id
JOIN stylists st ON b.stylist_id = st.id
JOIN time_slots ts ON b.time_slot_id = ts.id
JOIN schedules sch ON ts.schedule_id = sch.id
WHERE b.id = $1
`

type GetBookingDetailByIDRow struct {
	ID            int64              `db:"id" json:"id"`
	StoreID       int64              `db:"store_id" json:"store_id"`
	StoreName     string             `db:"store_name" json:"store_name"`
	CustomerID    int64              `db:"customer_id" json:"customer_id"`
	StylistID     int64              `db:"stylist_id" json:"stylist_id"`
	StylistName   pgtype.Text        `db:"stylist_name" json:"stylist_name"`
	TimeSlotID    int64              `db:"time_slot_id" json:"time_slot_id"`
	StartTime     pgtype.Time        `db:"start_time" json:"start_time"`
	EndTime       pgtype.Time        `db:"end_time" json:"end_time"`
	WorkDate      pgtype.Date        `db:"work_date" json:"work_date"`
	IsChatEnabled pgtype.Bool        `db:"is_chat_enabled" json:"is_chat_enabled"`
	Note          pgtype.Text        `db:"note" json:"note"`
	Status        string             `db:"status" json:"status"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetBookingDetailByID(ctx context.Context, id int64) (GetBookingDetailByIDRow, error) {
	row := q.db.QueryRow(ctx, getBookingDetailByID, id)
	var i GetBookingDetailByIDRow
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.StoreName,
		&i.CustomerID,
		&i.StylistID,
		&i.StylistName,
		&i.TimeSlotID,
		&i.StartTime,
		&i.EndTime,
		&i.WorkDate,
		&i.IsChatEnabled,
		&i.Note,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBookingInfoByID = `-- name: GetBookingInfoByID :one
SELECT status, customer_id, store_id FROM bookings WHERE id = $1
`

type GetBookingInfoByIDRow struct {
	Status     string `db:"status" json:"status"`
	CustomerID int64  `db:"customer_id" json:"customer_id"`
	StoreID    int64  `db:"store_id" json:"store_id"`
}

func (q *Queries) GetBookingInfoByID(ctx context.Context, id int64) (GetBookingInfoByIDRow, error) {
	row := q.db.QueryRow(ctx, getBookingInfoByID, id)
	var i GetBookingInfoByIDRow
	err := row.Scan(&i.Status, &i.CustomerID, &i.StoreID)
	return i, err
}

const updateBookingStatus = `-- name: UpdateBookingStatus :exec
UPDATE bookings
SET status = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateBookingStatusParams struct {
	ID     int64  `db:"id" json:"id"`
	Status string `db:"status" json:"status"`
}

func (q *Queries) UpdateBookingStatus(ctx context.Context, arg UpdateBookingStatusParams) error {
	_, err := q.db.Exec(ctx, updateBookingStatus, arg.ID, arg.Status)
	return err
}
