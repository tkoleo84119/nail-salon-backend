// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: booking.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cancelBooking = `-- name: CancelBooking :one
UPDATE bookings
SET status = $2, cancel_reason = $3, updated_at = NOW()
WHERE id = $1
RETURNING id
`

type CancelBookingParams struct {
	ID           int64       `db:"id" json:"id"`
	Status       string      `db:"status" json:"status"`
	CancelReason pgtype.Text `db:"cancel_reason" json:"cancel_reason"`
}

func (q *Queries) CancelBooking(ctx context.Context, arg CancelBookingParams) (int64, error) {
	row := q.db.QueryRow(ctx, cancelBooking, arg.ID, arg.Status, arg.CancelReason)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (
    id,
    store_id,
    customer_id,
    stylist_id,
    time_slot_id,
    is_chat_enabled,
    note,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, store_id, customer_id, stylist_id, time_slot_id, is_chat_enabled, actual_duration, note, status, created_at, updated_at, cancel_reason
`

type CreateBookingParams struct {
	ID            int64       `db:"id" json:"id"`
	StoreID       int64       `db:"store_id" json:"store_id"`
	CustomerID    int64       `db:"customer_id" json:"customer_id"`
	StylistID     int64       `db:"stylist_id" json:"stylist_id"`
	TimeSlotID    int64       `db:"time_slot_id" json:"time_slot_id"`
	IsChatEnabled pgtype.Bool `db:"is_chat_enabled" json:"is_chat_enabled"`
	Note          pgtype.Text `db:"note" json:"note"`
	Status        string      `db:"status" json:"status"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRow(ctx, createBooking,
		arg.ID,
		arg.StoreID,
		arg.CustomerID,
		arg.StylistID,
		arg.TimeSlotID,
		arg.IsChatEnabled,
		arg.Note,
		arg.Status,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.CustomerID,
		&i.StylistID,
		&i.TimeSlotID,
		&i.IsChatEnabled,
		&i.ActualDuration,
		&i.Note,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CancelReason,
	)
	return i, err
}

const getBookingDetailByID = `-- name: GetBookingDetailByID :one
SELECT
    b.id,
    b.store_id,
    s.name as store_name,
    b.customer_id,
    c.line_uid as customer_line_uid,
    c.name as customer_name,
    c.phone as customer_phone,
    b.stylist_id,
    st.name as stylist_name,
    b.time_slot_id,
    ts.start_time,
    ts.end_time,
    sch.work_date,
    b.is_chat_enabled,
    b.note,
    b.actual_duration,
    b.status,
    b.created_at,
    b.updated_at
FROM bookings b
JOIN stores s ON b.store_id = s.id
JOIN customers c ON b.customer_id = c.id
JOIN stylists st ON b.stylist_id = st.id
JOIN time_slots ts ON b.time_slot_id = ts.id
JOIN schedules sch ON ts.schedule_id = sch.id
WHERE b.id = $1
`

type GetBookingDetailByIDRow struct {
	ID              int64              `db:"id" json:"id"`
	StoreID         int64              `db:"store_id" json:"store_id"`
	StoreName       string             `db:"store_name" json:"store_name"`
	CustomerID      int64              `db:"customer_id" json:"customer_id"`
	CustomerLineUid string             `db:"customer_line_uid" json:"customer_line_uid"`
	CustomerName    string             `db:"customer_name" json:"customer_name"`
	CustomerPhone   string             `db:"customer_phone" json:"customer_phone"`
	StylistID       int64              `db:"stylist_id" json:"stylist_id"`
	StylistName     pgtype.Text        `db:"stylist_name" json:"stylist_name"`
	TimeSlotID      int64              `db:"time_slot_id" json:"time_slot_id"`
	StartTime       pgtype.Time        `db:"start_time" json:"start_time"`
	EndTime         pgtype.Time        `db:"end_time" json:"end_time"`
	WorkDate        pgtype.Date        `db:"work_date" json:"work_date"`
	IsChatEnabled   pgtype.Bool        `db:"is_chat_enabled" json:"is_chat_enabled"`
	Note            pgtype.Text        `db:"note" json:"note"`
	ActualDuration  pgtype.Int4        `db:"actual_duration" json:"actual_duration"`
	Status          string             `db:"status" json:"status"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetBookingDetailByID(ctx context.Context, id int64) (GetBookingDetailByIDRow, error) {
	row := q.db.QueryRow(ctx, getBookingDetailByID, id)
	var i GetBookingDetailByIDRow
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.StoreName,
		&i.CustomerID,
		&i.CustomerLineUid,
		&i.CustomerName,
		&i.CustomerPhone,
		&i.StylistID,
		&i.StylistName,
		&i.TimeSlotID,
		&i.StartTime,
		&i.EndTime,
		&i.WorkDate,
		&i.IsChatEnabled,
		&i.Note,
		&i.ActualDuration,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBookingInfoWithDateByID = `-- name: GetBookingInfoWithDateByID :one
SELECT
    b.status,
    b.customer_id,
    b.store_id,
    sch.work_date,
    ts.start_time
FROM bookings b
JOIN time_slots ts ON b.time_slot_id = ts.id
JOIN schedules sch ON ts.schedule_id = sch.id
WHERE b.id = $1
`

type GetBookingInfoWithDateByIDRow struct {
	Status     string      `db:"status" json:"status"`
	CustomerID int64       `db:"customer_id" json:"customer_id"`
	StoreID    int64       `db:"store_id" json:"store_id"`
	WorkDate   pgtype.Date `db:"work_date" json:"work_date"`
	StartTime  pgtype.Time `db:"start_time" json:"start_time"`
}

func (q *Queries) GetBookingInfoWithDateByID(ctx context.Context, id int64) (GetBookingInfoWithDateByIDRow, error) {
	row := q.db.QueryRow(ctx, getBookingInfoWithDateByID, id)
	var i GetBookingInfoWithDateByIDRow
	err := row.Scan(
		&i.Status,
		&i.CustomerID,
		&i.StoreID,
		&i.WorkDate,
		&i.StartTime,
	)
	return i, err
}

const getStorePerformanceGroupByStylist = `-- name: GetStorePerformanceGroupByStylist :many
SELECT
    b.stylist_id,
    st.name as stylist_name,
    COUNT(*) as total_bookings,
    SUM(CASE WHEN b.status = 'COMPLETED' THEN 1 ELSE 0 END) as completed_bookings,
    SUM(CASE WHEN b.status = 'CANCELLED' THEN 1 ELSE 0 END) as cancelled_bookings,
    SUM(CASE WHEN b.status = 'NO_SHOW' THEN 1 ELSE 0 END) as no_show_bookings,
    COALESCE(SUM(CASE WHEN c.payment_method = 'LINE_PAY' AND b.status = 'COMPLETED' THEN COALESCE(c.final_amount, 0) ELSE 0 END), 0)::numeric(12,2) as line_pay_revenue,
    COALESCE(SUM(CASE WHEN c.payment_method = 'CASH' AND b.status = 'COMPLETED' THEN COALESCE(c.final_amount, 0) ELSE 0 END), 0)::numeric(12,2) as cash_revenue,
    COALESCE(SUM(CASE WHEN b.status = 'COMPLETED' THEN COALESCE(c.paid_amount, 0) ELSE 0 END), 0)::numeric(12,2) as total_paid_amount,
    SUM(COALESCE(b.actual_duration, 0)) as total_service_time
FROM bookings b
INNER JOIN stores s ON b.store_id = s.id
INNER JOIN stylists st ON b.stylist_id = st.id
INNER JOIN time_slots ts ON b.time_slot_id = ts.id
INNER JOIN schedules sch ON ts.schedule_id = sch.id
LEFT JOIN checkouts c ON b.id = c.booking_id
WHERE b.store_id = $1
    AND b.status != 'SCHEDULE'
    AND sch.work_date BETWEEN $2 AND $3
GROUP BY b.stylist_id, st.name
ORDER BY b.stylist_id
`

type GetStorePerformanceGroupByStylistParams struct {
	StoreID    int64       `db:"store_id" json:"store_id"`
	WorkDate   pgtype.Date `db:"work_date" json:"work_date"`
	WorkDate_2 pgtype.Date `db:"work_date_2" json:"work_date_2"`
}

type GetStorePerformanceGroupByStylistRow struct {
	StylistID         int64          `db:"stylist_id" json:"stylist_id"`
	StylistName       pgtype.Text    `db:"stylist_name" json:"stylist_name"`
	TotalBookings     int64          `db:"total_bookings" json:"total_bookings"`
	CompletedBookings int64          `db:"completed_bookings" json:"completed_bookings"`
	CancelledBookings int64          `db:"cancelled_bookings" json:"cancelled_bookings"`
	NoShowBookings    int64          `db:"no_show_bookings" json:"no_show_bookings"`
	LinePayRevenue    pgtype.Numeric `db:"line_pay_revenue" json:"line_pay_revenue"`
	CashRevenue       pgtype.Numeric `db:"cash_revenue" json:"cash_revenue"`
	TotalPaidAmount   pgtype.Numeric `db:"total_paid_amount" json:"total_paid_amount"`
	TotalServiceTime  int64          `db:"total_service_time" json:"total_service_time"`
}

func (q *Queries) GetStorePerformanceGroupByStylist(ctx context.Context, arg GetStorePerformanceGroupByStylistParams) ([]GetStorePerformanceGroupByStylistRow, error) {
	rows, err := q.db.Query(ctx, getStorePerformanceGroupByStylist, arg.StoreID, arg.WorkDate, arg.WorkDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStorePerformanceGroupByStylistRow{}
	for rows.Next() {
		var i GetStorePerformanceGroupByStylistRow
		if err := rows.Scan(
			&i.StylistID,
			&i.StylistName,
			&i.TotalBookings,
			&i.CompletedBookings,
			&i.CancelledBookings,
			&i.NoShowBookings,
			&i.LinePayRevenue,
			&i.CashRevenue,
			&i.TotalPaidAmount,
			&i.TotalServiceTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStylistPerformanceGroupByStore = `-- name: GetStylistPerformanceGroupByStore :many
SELECT
    b.store_id,
    s.name as store_name,
    COUNT(*) as total_bookings,
    SUM(CASE WHEN b.status = 'COMPLETED' THEN 1 ELSE 0 END) as completed_bookings,
    SUM(CASE WHEN b.status = 'CANCELLED' THEN 1 ELSE 0 END) as cancelled_bookings,
    SUM(CASE WHEN b.status = 'NO_SHOW' THEN 1 ELSE 0 END) as no_show_bookings,
    COALESCE(SUM(CASE WHEN c.payment_method = 'LINE_PAY' AND b.status = 'COMPLETED' THEN COALESCE(c.final_amount, 0) ELSE 0 END), 0)::numeric(12,2) as line_pay_revenue,
    COALESCE(SUM(CASE WHEN c.payment_method = 'CASH' AND b.status = 'COMPLETED' THEN COALESCE(c.final_amount, 0) ELSE 0 END), 0)::numeric(12,2) as cash_revenue,
    COALESCE(SUM(CASE WHEN b.status = 'COMPLETED' THEN COALESCE(c.paid_amount, 0) ELSE 0 END), 0)::numeric(12,2) as total_paid_amount,
    SUM(COALESCE(b.actual_duration, 0)) as total_service_time
FROM bookings b
INNER JOIN stores s ON b.store_id = s.id
INNER JOIN time_slots ts ON b.time_slot_id = ts.id
INNER JOIN schedules sch ON ts.schedule_id = sch.id
LEFT JOIN checkouts c ON b.id = c.booking_id
WHERE b.stylist_id = $1
    AND b.status != 'SCHEDULE'
    AND sch.work_date BETWEEN $2 AND $3
GROUP BY b.store_id, s.name
ORDER BY b.store_id
`

type GetStylistPerformanceGroupByStoreParams struct {
	StylistID  int64       `db:"stylist_id" json:"stylist_id"`
	WorkDate   pgtype.Date `db:"work_date" json:"work_date"`
	WorkDate_2 pgtype.Date `db:"work_date_2" json:"work_date_2"`
}

type GetStylistPerformanceGroupByStoreRow struct {
	StoreID           int64          `db:"store_id" json:"store_id"`
	StoreName         string         `db:"store_name" json:"store_name"`
	TotalBookings     int64          `db:"total_bookings" json:"total_bookings"`
	CompletedBookings int64          `db:"completed_bookings" json:"completed_bookings"`
	CancelledBookings int64          `db:"cancelled_bookings" json:"cancelled_bookings"`
	NoShowBookings    int64          `db:"no_show_bookings" json:"no_show_bookings"`
	LinePayRevenue    pgtype.Numeric `db:"line_pay_revenue" json:"line_pay_revenue"`
	CashRevenue       pgtype.Numeric `db:"cash_revenue" json:"cash_revenue"`
	TotalPaidAmount   pgtype.Numeric `db:"total_paid_amount" json:"total_paid_amount"`
	TotalServiceTime  int64          `db:"total_service_time" json:"total_service_time"`
}

func (q *Queries) GetStylistPerformanceGroupByStore(ctx context.Context, arg GetStylistPerformanceGroupByStoreParams) ([]GetStylistPerformanceGroupByStoreRow, error) {
	rows, err := q.db.Query(ctx, getStylistPerformanceGroupByStore, arg.StylistID, arg.WorkDate, arg.WorkDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStylistPerformanceGroupByStoreRow{}
	for rows.Next() {
		var i GetStylistPerformanceGroupByStoreRow
		if err := rows.Scan(
			&i.StoreID,
			&i.StoreName,
			&i.TotalBookings,
			&i.CompletedBookings,
			&i.CancelledBookings,
			&i.NoShowBookings,
			&i.LinePayRevenue,
			&i.CashRevenue,
			&i.TotalPaidAmount,
			&i.TotalServiceTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookingActualDuration = `-- name: UpdateBookingActualDuration :exec
UPDATE bookings
SET actual_duration = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateBookingActualDurationParams struct {
	ID             int64       `db:"id" json:"id"`
	ActualDuration pgtype.Int4 `db:"actual_duration" json:"actual_duration"`
}

func (q *Queries) UpdateBookingActualDuration(ctx context.Context, arg UpdateBookingActualDurationParams) error {
	_, err := q.db.Exec(ctx, updateBookingActualDuration, arg.ID, arg.ActualDuration)
	return err
}

const updateBookingStatus = `-- name: UpdateBookingStatus :exec
UPDATE bookings
SET status = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateBookingStatusParams struct {
	ID     int64  `db:"id" json:"id"`
	Status string `db:"status" json:"status"`
}

func (q *Queries) UpdateBookingStatus(ctx context.Context, arg UpdateBookingStatusParams) error {
	_, err := q.db.Exec(ctx, updateBookingStatus, arg.ID, arg.Status)
	return err
}
