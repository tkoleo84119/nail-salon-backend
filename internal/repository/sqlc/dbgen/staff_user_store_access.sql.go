// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: staff_user_store_access.sql

package dbgen

import (
	"context"
)

const batchCreateStaffUserStoreAccess = `-- name: BatchCreateStaffUserStoreAccess :exec
INSERT INTO staff_user_store_access (
    store_id,
    staff_user_id,
    created_at,
    updated_at
)
SELECT 
    unnest($1::bigint[]) as store_id,
    $2 as staff_user_id,
    NOW() as created_at,
    NOW() as updated_at
`

type BatchCreateStaffUserStoreAccessParams struct {
	Column1     []int64 `db:"column_1" json:"column_1"`
	StaffUserID int64   `db:"staff_user_id" json:"staff_user_id"`
}

func (q *Queries) BatchCreateStaffUserStoreAccess(ctx context.Context, arg BatchCreateStaffUserStoreAccessParams) error {
	_, err := q.db.Exec(ctx, batchCreateStaffUserStoreAccess, arg.Column1, arg.StaffUserID)
	return err
}

const checkStoreAccessExists = `-- name: CheckStoreAccessExists :one
SELECT EXISTS(
    SELECT 1 FROM staff_user_store_access 
    WHERE staff_user_id = $1 AND store_id = $2
) as exists
`

type CheckStoreAccessExistsParams struct {
	StaffUserID int64 `db:"staff_user_id" json:"staff_user_id"`
	StoreID     int64 `db:"store_id" json:"store_id"`
}

func (q *Queries) CheckStoreAccessExists(ctx context.Context, arg CheckStoreAccessExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkStoreAccessExists, arg.StaffUserID, arg.StoreID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createStaffUserStoreAccess = `-- name: CreateStaffUserStoreAccess :exec
INSERT INTO staff_user_store_access (
    store_id,
    staff_user_id,
    created_at,
    updated_at
) VALUES (
    $1, $2, NOW(), NOW()
)
`

type CreateStaffUserStoreAccessParams struct {
	StoreID     int64 `db:"store_id" json:"store_id"`
	StaffUserID int64 `db:"staff_user_id" json:"staff_user_id"`
}

func (q *Queries) CreateStaffUserStoreAccess(ctx context.Context, arg CreateStaffUserStoreAccessParams) error {
	_, err := q.db.Exec(ctx, createStaffUserStoreAccess, arg.StoreID, arg.StaffUserID)
	return err
}

const getStaffUserStoreAccess = `-- name: GetStaffUserStoreAccess :many
SELECT
    sa.store_id,
    s.name as store_name
FROM staff_user_store_access sa
JOIN stores s ON sa.store_id = s.id
WHERE sa.staff_user_id = $1 AND s.is_active = true
`

type GetStaffUserStoreAccessRow struct {
	StoreID   int64  `db:"store_id" json:"store_id"`
	StoreName string `db:"store_name" json:"store_name"`
}

func (q *Queries) GetStaffUserStoreAccess(ctx context.Context, staffUserID int64) ([]GetStaffUserStoreAccessRow, error) {
	rows, err := q.db.Query(ctx, getStaffUserStoreAccess, staffUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStaffUserStoreAccessRow{}
	for rows.Next() {
		var i GetStaffUserStoreAccessRow
		if err := rows.Scan(&i.StoreID, &i.StoreName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
