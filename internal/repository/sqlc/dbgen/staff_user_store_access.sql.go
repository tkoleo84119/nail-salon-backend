// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: staff_user_store_access.sql

package dbgen

import (
	"context"
)

const getStaffUserStoreAccess = `-- name: GetStaffUserStoreAccess :many
SELECT
    sa.store_id,
    s.name as store_name
FROM staff_user_store_access sa
JOIN stores s ON sa.store_id = s.id
WHERE sa.staff_user_id = $1 AND s.is_active = true
`

type GetStaffUserStoreAccessRow struct {
	StoreID   int64  `db:"store_id" json:"store_id"`
	StoreName string `db:"store_name" json:"store_name"`
}

func (q *Queries) GetStaffUserStoreAccess(ctx context.Context, staffUserID int64) ([]GetStaffUserStoreAccessRow, error) {
	rows, err := q.db.Query(ctx, getStaffUserStoreAccess, staffUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStaffUserStoreAccessRow{}
	for rows.Next() {
		var i GetStaffUserStoreAccessRow
		if err := rows.Scan(&i.StoreID, &i.StoreName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
