// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: time_slot.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BatchCreateTimeSlotsParams struct {
	ID          int64              `db:"id" json:"id"`
	ScheduleID  int64              `db:"schedule_id" json:"schedule_id"`
	StartTime   pgtype.Time        `db:"start_time" json:"start_time"`
	EndTime     pgtype.Time        `db:"end_time" json:"end_time"`
	IsAvailable pgtype.Bool        `db:"is_available" json:"is_available"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

const checkTimeSlotOverlap = `-- name: CheckTimeSlotOverlap :one
SELECT EXISTS(
    SELECT 1 FROM time_slots
    WHERE schedule_id = $1
    AND start_time < $2
    AND end_time > $3
) AS has_overlap
`

type CheckTimeSlotOverlapParams struct {
	ScheduleID int64       `db:"schedule_id" json:"schedule_id"`
	StartTime  pgtype.Time `db:"start_time" json:"start_time"`
	EndTime    pgtype.Time `db:"end_time" json:"end_time"`
}

func (q *Queries) CheckTimeSlotOverlap(ctx context.Context, arg CheckTimeSlotOverlapParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkTimeSlotOverlap, arg.ScheduleID, arg.StartTime, arg.EndTime)
	var has_overlap bool
	err := row.Scan(&has_overlap)
	return has_overlap, err
}

const checkTimeSlotOverlapExcluding = `-- name: CheckTimeSlotOverlapExcluding :one
SELECT EXISTS(
    SELECT 1 FROM time_slots
    WHERE schedule_id = $1
    AND id != $2
    AND start_time < $4
    AND end_time > $3
) AS has_overlap
`

type CheckTimeSlotOverlapExcludingParams struct {
	ScheduleID int64       `db:"schedule_id" json:"schedule_id"`
	ID         int64       `db:"id" json:"id"`
	EndTime    pgtype.Time `db:"end_time" json:"end_time"`
	StartTime  pgtype.Time `db:"start_time" json:"start_time"`
}

func (q *Queries) CheckTimeSlotOverlapExcluding(ctx context.Context, arg CheckTimeSlotOverlapExcludingParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkTimeSlotOverlapExcluding,
		arg.ScheduleID,
		arg.ID,
		arg.EndTime,
		arg.StartTime,
	)
	var has_overlap bool
	err := row.Scan(&has_overlap)
	return has_overlap, err
}

const createTimeSlot = `-- name: CreateTimeSlot :one
INSERT INTO time_slots (
    id,
    schedule_id,
    start_time,
    end_time,
    is_available,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, true, NOW(), NOW()
) RETURNING
    id,
    schedule_id,
    start_time,
    end_time,
    is_available,
    created_at,
    updated_at
`

type CreateTimeSlotParams struct {
	ID         int64       `db:"id" json:"id"`
	ScheduleID int64       `db:"schedule_id" json:"schedule_id"`
	StartTime  pgtype.Time `db:"start_time" json:"start_time"`
	EndTime    pgtype.Time `db:"end_time" json:"end_time"`
}

func (q *Queries) CreateTimeSlot(ctx context.Context, arg CreateTimeSlotParams) (TimeSlot, error) {
	row := q.db.QueryRow(ctx, createTimeSlot,
		arg.ID,
		arg.ScheduleID,
		arg.StartTime,
		arg.EndTime,
	)
	var i TimeSlot
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.StartTime,
		&i.EndTime,
		&i.IsAvailable,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTimeSlotByID = `-- name: DeleteTimeSlotByID :exec
DELETE FROM time_slots
WHERE id = $1
`

func (q *Queries) DeleteTimeSlotByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTimeSlotByID, id)
	return err
}

const deleteTimeSlotsByScheduleIDs = `-- name: DeleteTimeSlotsByScheduleIDs :exec
DELETE FROM time_slots
WHERE schedule_id = ANY($1::bigint[])
`

func (q *Queries) DeleteTimeSlotsByScheduleIDs(ctx context.Context, dollar_1 []int64) error {
	_, err := q.db.Exec(ctx, deleteTimeSlotsByScheduleIDs, dollar_1)
	return err
}

const getAvailableTimeSlotsByScheduleID = `-- name: GetAvailableTimeSlotsByScheduleID :many
SELECT
    ts.id,
    ts.schedule_id,
    ts.start_time,
    ts.end_time,
    ts.is_available,
    ts.created_at,
    ts.updated_at
FROM time_slots ts
LEFT JOIN bookings b ON ts.id = b.time_slot_id AND b.status != 'CANCELLED'
WHERE ts.schedule_id = $1
  AND ts.is_available = true
  AND b.id IS NULL
ORDER BY ts.start_time
`

func (q *Queries) GetAvailableTimeSlotsByScheduleID(ctx context.Context, scheduleID int64) ([]TimeSlot, error) {
	rows, err := q.db.Query(ctx, getAvailableTimeSlotsByScheduleID, scheduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TimeSlot{}
	for rows.Next() {
		var i TimeSlot
		if err := rows.Scan(
			&i.ID,
			&i.ScheduleID,
			&i.StartTime,
			&i.EndTime,
			&i.IsAvailable,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimeSlotByID = `-- name: GetTimeSlotByID :one
SELECT
    id,
    schedule_id,
    start_time,
    end_time,
    is_available,
    created_at,
    updated_at
FROM time_slots
WHERE id = $1
`

func (q *Queries) GetTimeSlotByID(ctx context.Context, id int64) (TimeSlot, error) {
	row := q.db.QueryRow(ctx, getTimeSlotByID, id)
	var i TimeSlot
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.StartTime,
		&i.EndTime,
		&i.IsAvailable,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTimeSlotsByScheduleID = `-- name: GetTimeSlotsByScheduleID :many
SELECT
    id,
    schedule_id,
    start_time,
    end_time,
    is_available,
    created_at,
    updated_at
FROM time_slots
WHERE schedule_id = $1
ORDER BY start_time
`

func (q *Queries) GetTimeSlotsByScheduleID(ctx context.Context, scheduleID int64) ([]TimeSlot, error) {
	rows, err := q.db.Query(ctx, getTimeSlotsByScheduleID, scheduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TimeSlot{}
	for rows.Next() {
		var i TimeSlot
		if err := rows.Scan(
			&i.ID,
			&i.ScheduleID,
			&i.StartTime,
			&i.EndTime,
			&i.IsAvailable,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTimeSlot = `-- name: UpdateTimeSlot :one
UPDATE time_slots
SET
    is_available = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING
    id
`

type UpdateTimeSlotParams struct {
	ID          int64       `db:"id" json:"id"`
	IsAvailable pgtype.Bool `db:"is_available" json:"is_available"`
}

func (q *Queries) UpdateTimeSlot(ctx context.Context, arg UpdateTimeSlotParams) (int64, error) {
	row := q.db.QueryRow(ctx, updateTimeSlot, arg.ID, arg.IsAvailable)
	var id int64
	err := row.Scan(&id)
	return id, err
}
