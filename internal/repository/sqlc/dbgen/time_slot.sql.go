// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: time_slot.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BatchCreateTimeSlotsParams struct {
	ID          int64              `db:"id" json:"id"`
	ScheduleID  int64              `db:"schedule_id" json:"schedule_id"`
	StartTime   pgtype.Time        `db:"start_time" json:"start_time"`
	EndTime     pgtype.Time        `db:"end_time" json:"end_time"`
	IsAvailable pgtype.Bool        `db:"is_available" json:"is_available"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

const createTimeSlot = `-- name: CreateTimeSlot :one
INSERT INTO time_slots (
    id,
    schedule_id,
    start_time,
    end_time,
    is_available,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, true, NOW(), NOW()
) RETURNING
    id,
    schedule_id,
    start_time,
    end_time,
    is_available,
    created_at,
    updated_at
`

type CreateTimeSlotParams struct {
	ID         int64       `db:"id" json:"id"`
	ScheduleID int64       `db:"schedule_id" json:"schedule_id"`
	StartTime  pgtype.Time `db:"start_time" json:"start_time"`
	EndTime    pgtype.Time `db:"end_time" json:"end_time"`
}

func (q *Queries) CreateTimeSlot(ctx context.Context, arg CreateTimeSlotParams) (TimeSlot, error) {
	row := q.db.QueryRow(ctx, createTimeSlot,
		arg.ID,
		arg.ScheduleID,
		arg.StartTime,
		arg.EndTime,
	)
	var i TimeSlot
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.StartTime,
		&i.EndTime,
		&i.IsAvailable,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTimeSlotsByScheduleIDs = `-- name: DeleteTimeSlotsByScheduleIDs :exec
DELETE FROM time_slots
WHERE schedule_id = ANY($1::bigint[])
`

func (q *Queries) DeleteTimeSlotsByScheduleIDs(ctx context.Context, dollar_1 []int64) error {
	_, err := q.db.Exec(ctx, deleteTimeSlotsByScheduleIDs, dollar_1)
	return err
}

const getTimeSlotsByScheduleID = `-- name: GetTimeSlotsByScheduleID :many
SELECT
    id,
    schedule_id,
    start_time,
    end_time,
    is_available,
    created_at,
    updated_at
FROM time_slots
WHERE schedule_id = $1
ORDER BY start_time
`

func (q *Queries) GetTimeSlotsByScheduleID(ctx context.Context, scheduleID int64) ([]TimeSlot, error) {
	rows, err := q.db.Query(ctx, getTimeSlotsByScheduleID, scheduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TimeSlot{}
	for rows.Next() {
		var i TimeSlot
		if err := rows.Scan(
			&i.ID,
			&i.ScheduleID,
			&i.StartTime,
			&i.EndTime,
			&i.IsAvailable,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
