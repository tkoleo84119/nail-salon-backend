// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stylist.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkStylistExistsByStaffUserID = `-- name: CheckStylistExistsByStaffUserID :one
SELECT EXISTS(
    SELECT 1 FROM stylists
    WHERE staff_user_id = $1
) as exists
`

func (q *Queries) CheckStylistExistsByStaffUserID(ctx context.Context, staffUserID int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkStylistExistsByStaffUserID, staffUserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createStylist = `-- name: CreateStylist :one
INSERT INTO stylists (
    id,
    staff_user_id,
    name,
    good_at_shapes,
    good_at_colors,
    good_at_styles,
    is_introvert,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, NOW(), NOW()
) RETURNING
    id,
    staff_user_id,
    name,
    good_at_shapes,
    good_at_colors,
    good_at_styles,
    is_introvert,
    created_at,
    updated_at
`

type CreateStylistParams struct {
	ID           int64       `db:"id" json:"id"`
	StaffUserID  int64       `db:"staff_user_id" json:"staff_user_id"`
	Name         pgtype.Text `db:"name" json:"name"`
	GoodAtShapes []string    `db:"good_at_shapes" json:"good_at_shapes"`
	GoodAtColors []string    `db:"good_at_colors" json:"good_at_colors"`
	GoodAtStyles []string    `db:"good_at_styles" json:"good_at_styles"`
	IsIntrovert  pgtype.Bool `db:"is_introvert" json:"is_introvert"`
}

func (q *Queries) CreateStylist(ctx context.Context, arg CreateStylistParams) (Stylist, error) {
	row := q.db.QueryRow(ctx, createStylist,
		arg.ID,
		arg.StaffUserID,
		arg.Name,
		arg.GoodAtShapes,
		arg.GoodAtColors,
		arg.GoodAtStyles,
		arg.IsIntrovert,
	)
	var i Stylist
	err := row.Scan(
		&i.ID,
		&i.StaffUserID,
		&i.Name,
		&i.GoodAtShapes,
		&i.GoodAtColors,
		&i.GoodAtStyles,
		&i.IsIntrovert,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStylistByID = `-- name: GetStylistByID :one
SELECT
    id,
    staff_user_id,
    name,
    good_at_shapes,
    good_at_colors,
    good_at_styles,
    is_introvert,
    created_at,
    updated_at
FROM stylists
WHERE id = $1
`

func (q *Queries) GetStylistByID(ctx context.Context, id int64) (Stylist, error) {
	row := q.db.QueryRow(ctx, getStylistByID, id)
	var i Stylist
	err := row.Scan(
		&i.ID,
		&i.StaffUserID,
		&i.Name,
		&i.GoodAtShapes,
		&i.GoodAtColors,
		&i.GoodAtStyles,
		&i.IsIntrovert,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStylistByStaffUserID = `-- name: GetStylistByStaffUserID :one
SELECT
    id,
    staff_user_id,
    name,
    good_at_shapes,
    good_at_colors,
    good_at_styles,
    is_introvert,
    created_at,
    updated_at
FROM stylists
WHERE staff_user_id = $1
`

func (q *Queries) GetStylistByStaffUserID(ctx context.Context, staffUserID int64) (Stylist, error) {
	row := q.db.QueryRow(ctx, getStylistByStaffUserID, staffUserID)
	var i Stylist
	err := row.Scan(
		&i.ID,
		&i.StaffUserID,
		&i.Name,
		&i.GoodAtShapes,
		&i.GoodAtColors,
		&i.GoodAtStyles,
		&i.IsIntrovert,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
