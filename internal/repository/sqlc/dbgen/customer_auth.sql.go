// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customer_auth.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomerAuth = `-- name: CreateCustomerAuth :one
INSERT INTO customer_auths (id, customer_id, provider, provider_uid, other_info)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, customer_id, provider, provider_uid, other_info, created_at, updated_at
`

type CreateCustomerAuthParams struct {
	ID          int64  `db:"id" json:"id"`
	CustomerID  int64  `db:"customer_id" json:"customer_id"`
	Provider    string `db:"provider" json:"provider"`
	ProviderUid string `db:"provider_uid" json:"provider_uid"`
	OtherInfo   []byte `db:"other_info" json:"other_info"`
}

func (q *Queries) CreateCustomerAuth(ctx context.Context, arg CreateCustomerAuthParams) (CustomerAuth, error) {
	row := q.db.QueryRow(ctx, createCustomerAuth,
		arg.ID,
		arg.CustomerID,
		arg.Provider,
		arg.ProviderUid,
		arg.OtherInfo,
	)
	var i CustomerAuth
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Provider,
		&i.ProviderUid,
		&i.OtherInfo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerAuthByProviderUid = `-- name: GetCustomerAuthByProviderUid :one
SELECT ca.id, ca.customer_id, ca.provider, ca.provider_uid, ca.other_info,
      ca.created_at, ca.updated_at,
      c.id as customer_id, c.name as customer_name, c.phone as customer_phone
FROM customer_auths ca
JOIN customers c ON ca.customer_id = c.id
WHERE ca.provider = $1 AND ca.provider_uid = $2
`

type GetCustomerAuthByProviderUidParams struct {
	Provider    string `db:"provider" json:"provider"`
	ProviderUid string `db:"provider_uid" json:"provider_uid"`
}

type GetCustomerAuthByProviderUidRow struct {
	ID            int64              `db:"id" json:"id"`
	CustomerID    int64              `db:"customer_id" json:"customer_id"`
	Provider      string             `db:"provider" json:"provider"`
	ProviderUid   string             `db:"provider_uid" json:"provider_uid"`
	OtherInfo     []byte             `db:"other_info" json:"other_info"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	CustomerID_2  int64              `db:"customer_id_2" json:"customer_id_2"`
	CustomerName  string             `db:"customer_name" json:"customer_name"`
	CustomerPhone string             `db:"customer_phone" json:"customer_phone"`
}

func (q *Queries) GetCustomerAuthByProviderUid(ctx context.Context, arg GetCustomerAuthByProviderUidParams) (GetCustomerAuthByProviderUidRow, error) {
	row := q.db.QueryRow(ctx, getCustomerAuthByProviderUid, arg.Provider, arg.ProviderUid)
	var i GetCustomerAuthByProviderUidRow
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Provider,
		&i.ProviderUid,
		&i.OtherInfo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CustomerID_2,
		&i.CustomerName,
		&i.CustomerPhone,
	)
	return i, err
}
