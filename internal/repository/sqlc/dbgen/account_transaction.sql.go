// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account_transaction.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccountTransaction = `-- name: CreateAccountTransaction :one
INSERT INTO account_transactions (
    id,
    account_id,
    transaction_date,
    type,
    amount,
    balance,
    note
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id
`

type CreateAccountTransactionParams struct {
	ID              int64              `db:"id" json:"id"`
	AccountID       int64              `db:"account_id" json:"account_id"`
	TransactionDate pgtype.Timestamptz `db:"transaction_date" json:"transaction_date"`
	Type            string             `db:"type" json:"type"`
	Amount          pgtype.Numeric     `db:"amount" json:"amount"`
	Balance         pgtype.Numeric     `db:"balance" json:"balance"`
	Note            pgtype.Text        `db:"note" json:"note"`
}

func (q *Queries) CreateAccountTransaction(ctx context.Context, arg CreateAccountTransactionParams) (int64, error) {
	row := q.db.QueryRow(ctx, createAccountTransaction,
		arg.ID,
		arg.AccountID,
		arg.TransactionDate,
		arg.Type,
		arg.Amount,
		arg.Balance,
		arg.Note,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAccountTransactionByID = `-- name: GetAccountTransactionByID :one
SELECT id, account_id, transaction_date, type, amount, balance, note
FROM account_transactions
WHERE id = $1
`

type GetAccountTransactionByIDRow struct {
	ID              int64              `db:"id" json:"id"`
	AccountID       int64              `db:"account_id" json:"account_id"`
	TransactionDate pgtype.Timestamptz `db:"transaction_date" json:"transaction_date"`
	Type            string             `db:"type" json:"type"`
	Amount          pgtype.Numeric     `db:"amount" json:"amount"`
	Balance         pgtype.Numeric     `db:"balance" json:"balance"`
	Note            pgtype.Text        `db:"note" json:"note"`
}

func (q *Queries) GetAccountTransactionByID(ctx context.Context, id int64) (GetAccountTransactionByIDRow, error) {
	row := q.db.QueryRow(ctx, getAccountTransactionByID, id)
	var i GetAccountTransactionByIDRow
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.TransactionDate,
		&i.Type,
		&i.Amount,
		&i.Balance,
		&i.Note,
	)
	return i, err
}

const getAccountTransactionCurrentBalance = `-- name: GetAccountTransactionCurrentBalance :one
SELECT COALESCE(
(SELECT balance
    FROM account_transactions
    WHERE account_id = $1
    ORDER BY transaction_date DESC, created_at DESC
    LIMIT 1),
    0
)::int as balance
`

func (q *Queries) GetAccountTransactionCurrentBalance(ctx context.Context, accountID int64) (int32, error) {
	row := q.db.QueryRow(ctx, getAccountTransactionCurrentBalance, accountID)
	var balance int32
	err := row.Scan(&balance)
	return balance, err
}
