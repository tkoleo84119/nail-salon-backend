// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: brand.sql

package dbgen

import (
	"context"
)

const checkBrandNameExists = `-- name: CheckBrandNameExists :one
SELECT EXISTS(SELECT 1 FROM brands WHERE name = $1)
`

func (q *Queries) CheckBrandNameExists(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRow(ctx, checkBrandNameExists, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createBrand = `-- name: CreateBrand :one
INSERT INTO brands (id, name)
VALUES ($1, $2)
RETURNING id, name, is_active, created_at, updated_at
`

type CreateBrandParams struct {
	ID   int64  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

func (q *Queries) CreateBrand(ctx context.Context, arg CreateBrandParams) (Brand, error) {
	row := q.db.QueryRow(ctx, createBrand, arg.ID, arg.Name)
	var i Brand
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
