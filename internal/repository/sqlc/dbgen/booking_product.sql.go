// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: booking_product.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BulkCreateBookingProductsParams struct {
	BookingID int64              `db:"booking_id" json:"booking_id"`
	ProductID int64              `db:"product_id" json:"product_id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

const bulkDeleteBookingProducts = `-- name: BulkDeleteBookingProducts :exec
DELETE FROM booking_products
WHERE booking_id = $1 AND product_id = ANY($2::bigint[])
`

type BulkDeleteBookingProductsParams struct {
	BookingID int64   `db:"booking_id" json:"booking_id"`
	Column2   []int64 `db:"column_2" json:"column_2"`
}

func (q *Queries) BulkDeleteBookingProducts(ctx context.Context, arg BulkDeleteBookingProductsParams) error {
	_, err := q.db.Exec(ctx, bulkDeleteBookingProducts, arg.BookingID, arg.Column2)
	return err
}

const countProductsByIDs = `-- name: CountProductsByIDs :one
SELECT COUNT(*) FROM products
WHERE id = ANY($1::bigint[]) AND store_id = $2
`

type CountProductsByIDsParams struct {
	Column1 []int64 `db:"column_1" json:"column_1"`
	StoreID int64   `db:"store_id" json:"store_id"`
}

func (q *Queries) CountProductsByIDs(ctx context.Context, arg CountProductsByIDsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countProductsByIDs, arg.Column1, arg.StoreID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllBookingProductIdsByBookingID = `-- name: GetAllBookingProductIdsByBookingID :many
SELECT product_id FROM booking_products WHERE booking_id = $1
`

func (q *Queries) GetAllBookingProductIdsByBookingID(ctx context.Context, bookingID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, getAllBookingProductIdsByBookingID, bookingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var product_id int64
		if err := rows.Scan(&product_id); err != nil {
			return nil, err
		}
		items = append(items, product_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
