// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: expense.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkSupplierExists = `-- name: CheckSupplierExists :one
SELECT EXISTS(SELECT 1 FROM suppliers WHERE id = $1 AND is_active = true)
`

func (q *Queries) CheckSupplierExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkSupplierExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (
    id,
    store_id,
    category,
    supplier_id,
    amount,
    expense_date,
    note,
    payer_id,
    is_reimbursed
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id
`

type CreateExpenseParams struct {
	ID           int64          `db:"id" json:"id"`
	StoreID      int64          `db:"store_id" json:"store_id"`
	Category     pgtype.Text    `db:"category" json:"category"`
	SupplierID   pgtype.Int8    `db:"supplier_id" json:"supplier_id"`
	Amount       pgtype.Numeric `db:"amount" json:"amount"`
	ExpenseDate  pgtype.Date    `db:"expense_date" json:"expense_date"`
	Note         pgtype.Text    `db:"note" json:"note"`
	PayerID      pgtype.Int8    `db:"payer_id" json:"payer_id"`
	IsReimbursed pgtype.Bool    `db:"is_reimbursed" json:"is_reimbursed"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (int64, error) {
	row := q.db.QueryRow(ctx, createExpense,
		arg.ID,
		arg.StoreID,
		arg.Category,
		arg.SupplierID,
		arg.Amount,
		arg.ExpenseDate,
		arg.Note,
		arg.PayerID,
		arg.IsReimbursed,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
