// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: store.sql

package dbgen

import (
	"context"
)

const getAllActiveStores = `-- name: GetAllActiveStores :many
SELECT
    id,
    name
FROM stores
WHERE is_active = true
ORDER BY name
`

type GetAllActiveStoresRow struct {
	ID   int64  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

func (q *Queries) GetAllActiveStores(ctx context.Context) ([]GetAllActiveStoresRow, error) {
	rows, err := q.db.Query(ctx, getAllActiveStores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllActiveStoresRow{}
	for rows.Next() {
		var i GetAllActiveStoresRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
