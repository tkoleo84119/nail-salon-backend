// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: store.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkStoresExistAndActive = `-- name: CheckStoresExistAndActive :one
SELECT
    COUNT(*) as total_count,
    COUNT(CASE WHEN is_active = true THEN 1 END) as active_count
FROM stores
WHERE id = ANY($1::bigint[])
`

type CheckStoresExistAndActiveRow struct {
	TotalCount  int64 `db:"total_count" json:"total_count"`
	ActiveCount int64 `db:"active_count" json:"active_count"`
}

func (q *Queries) CheckStoresExistAndActive(ctx context.Context, dollar_1 []int64) (CheckStoresExistAndActiveRow, error) {
	row := q.db.QueryRow(ctx, checkStoresExistAndActive, dollar_1)
	var i CheckStoresExistAndActiveRow
	err := row.Scan(&i.TotalCount, &i.ActiveCount)
	return i, err
}

const getAllActiveStores = `-- name: GetAllActiveStores :many
SELECT
    id,
    name
FROM stores
WHERE is_active = true
ORDER BY name
`

type GetAllActiveStoresRow struct {
	ID   int64  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

func (q *Queries) GetAllActiveStores(ctx context.Context) ([]GetAllActiveStoresRow, error) {
	rows, err := q.db.Query(ctx, getAllActiveStores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllActiveStoresRow{}
	for rows.Next() {
		var i GetAllActiveStoresRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStoresByIDs = `-- name: GetStoresByIDs :many
SELECT
    id,
    name,
    is_active
FROM stores
WHERE id = ANY($1::bigint[])
`

type GetStoresByIDsRow struct {
	ID       int64       `db:"id" json:"id"`
	Name     string      `db:"name" json:"name"`
	IsActive pgtype.Bool `db:"is_active" json:"is_active"`
}

func (q *Queries) GetStoresByIDs(ctx context.Context, dollar_1 []int64) ([]GetStoresByIDsRow, error) {
	rows, err := q.db.Query(ctx, getStoresByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStoresByIDsRow{}
	for rows.Next() {
		var i GetStoresByIDsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.IsActive); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
