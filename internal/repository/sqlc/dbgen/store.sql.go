// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: store.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkStoreExistAndActive = `-- name: CheckStoreExistAndActive :one
SELECT EXISTS(
    SELECT 1 FROM stores WHERE id = $1 AND is_active = true
)
`

func (q *Queries) CheckStoreExistAndActive(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkStoreExistAndActive, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkStoreExistByID = `-- name: CheckStoreExistByID :one
SELECT EXISTS(
    SELECT 1 FROM stores WHERE id = $1
)
`

func (q *Queries) CheckStoreExistByID(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkStoreExistByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkStoreNameExists = `-- name: CheckStoreNameExists :one
SELECT EXISTS(
    SELECT 1 FROM stores WHERE name = $1
)
`

func (q *Queries) CheckStoreNameExists(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRow(ctx, checkStoreNameExists, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkStoreNameExistsExcluding = `-- name: CheckStoreNameExistsExcluding :one
SELECT EXISTS(
    SELECT 1 FROM stores WHERE name = $1 AND id != $2
)
`

type CheckStoreNameExistsExcludingParams struct {
	Name string `db:"name" json:"name"`
	ID   int64  `db:"id" json:"id"`
}

func (q *Queries) CheckStoreNameExistsExcluding(ctx context.Context, arg CheckStoreNameExistsExcludingParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkStoreNameExistsExcluding, arg.Name, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkStoresExistAndActive = `-- name: CheckStoresExistAndActive :one
SELECT
    COUNT(*) as total_count,
    COUNT(CASE WHEN is_active = true THEN 1 END) as active_count
FROM stores
WHERE id = ANY($1::bigint[])
`

type CheckStoresExistAndActiveRow struct {
	TotalCount  int64 `db:"total_count" json:"total_count"`
	ActiveCount int64 `db:"active_count" json:"active_count"`
}

func (q *Queries) CheckStoresExistAndActive(ctx context.Context, dollar_1 []int64) (CheckStoresExistAndActiveRow, error) {
	row := q.db.QueryRow(ctx, checkStoresExistAndActive, dollar_1)
	var i CheckStoresExistAndActiveRow
	err := row.Scan(&i.TotalCount, &i.ActiveCount)
	return i, err
}

const createStore = `-- name: CreateStore :exec
INSERT INTO stores (
    id,
    name,
    address,
    phone,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, NOW(), NOW()
)
`

type CreateStoreParams struct {
	ID      int64       `db:"id" json:"id"`
	Name    string      `db:"name" json:"name"`
	Address pgtype.Text `db:"address" json:"address"`
	Phone   pgtype.Text `db:"phone" json:"phone"`
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) error {
	_, err := q.db.Exec(ctx, createStore,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.Phone,
	)
	return err
}

const getAllActiveStoresName = `-- name: GetAllActiveStoresName :many
SELECT
    id,
    name
FROM stores
WHERE is_active = true
ORDER BY name
`

type GetAllActiveStoresNameRow struct {
	ID   int64  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

func (q *Queries) GetAllActiveStoresName(ctx context.Context) ([]GetAllActiveStoresNameRow, error) {
	rows, err := q.db.Query(ctx, getAllActiveStoresName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllActiveStoresNameRow{}
	for rows.Next() {
		var i GetAllActiveStoresNameRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStoreByID = `-- name: GetStoreByID :one
SELECT
    id,
    name,
    is_active
FROM stores
WHERE id = $1
`

type GetStoreByIDRow struct {
	ID       int64       `db:"id" json:"id"`
	Name     string      `db:"name" json:"name"`
	IsActive pgtype.Bool `db:"is_active" json:"is_active"`
}

func (q *Queries) GetStoreByID(ctx context.Context, id int64) (GetStoreByIDRow, error) {
	row := q.db.QueryRow(ctx, getStoreByID, id)
	var i GetStoreByIDRow
	err := row.Scan(&i.ID, &i.Name, &i.IsActive)
	return i, err
}

const getStoreDetailByID = `-- name: GetStoreDetailByID :one
SELECT
    id,
    name,
    address,
    phone,
    is_active,
    created_at,
    updated_at
FROM stores
WHERE id = $1
`

func (q *Queries) GetStoreDetailByID(ctx context.Context, id int64) (Store, error) {
	row := q.db.QueryRow(ctx, getStoreDetailByID, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
